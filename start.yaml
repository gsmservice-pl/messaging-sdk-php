openapi: 3.0.0
info:
  title: Messaging Gateway GSMService.pl
  description: "Client class is used to initialize SDK environment.\r\n\r\nPlease initialize it this way:\r\n\r\n```\r\n$security = '<YOUR API ACCESS TOKEN>';\r\n$sdk = Gateway\\Client::builder()->setSecurity($security)->build();\r\n```\r\n\r\nIf you want to use a Sandbox test system please initialize it as follows:\r\n\r\n```\r\n$sdk = Gateway\\Client::builder()->setServer(Gateway\\Client::SERVER_SANDBOX)->setSecurity($security)->build();\r\n```"
  contact:
    name: Bramka SMS GSMService.pl
    url: https://bramka.gsmservice.pl
    email: bramka@gsmservice.pl
  license:
    name: MIT
    url: https://opensource.org/license/mit
  version: 0.9.2
  x-logo:
    url: https://panel.gsmservice.pl/assets/media/logos/logo-gsmservice-color.svg
    href: https://bramka.gsmservice.pl
servers:
  - url: https://api.gsmservice.pl/rest
    description: Production system
    x-speakeasy-server-id: prod
  - url: https://api.gsmservice.pl/rest-sandbox
    description: Test system (SANDBOX)
    x-speakeasy-server-id: sandbox
paths:
  /account:
    get:
      tags:
        - Accounts
      summary: Get account details
      description: "Get current account balance and other details of your account. You can check also account limit and if account is main one. Main accounts have unlimited privileges and using [User Panel](https://panel.gsmservice.pl) you can create as many subaccounts as you need.\r\n \r\nThis method doesn't get any parameters. As a successful result an `GetAccountDetailsResponse` object will be returned with properties describing details of current account you are logged in to using API Access Token."
      operationId: getAccountDetails
      responses:
        '200':
          description: The request was processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: accounts
      x-speakeasy-name-override: get
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->accounts->get(

            );

            if ($response->accountResponse !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.accounts.get();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/account",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/account",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/rest/account", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/account\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/account");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/account")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/account")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /account/{user_login}:
    get:
      tags:
        - Accounts
      summary: Get subaccount details
      description: "Check account balance and other details such subcredit balance of a subaccount. Subaccounts are additional users who can access your account services and the details. You can restrict access level and setup privileges to subaccounts using [user panel](https://panel.gsmservice.pl).\r\n\r\nThis method accepts an `userLogin` parameter. You should pass the full subaccount login to access its data. \r\n\r\nAs a successful result a `GetSubaccountDetailsResponse` object will be returned with properties describing details of subaccount with provided login."
      operationId: getSubaccountDetails
      parameters:
        - name: user_login
          in: path
          description: Login of the subaccount (user) to get the data for
          required: true
          style: simple
          explode: true
          schema:
            type: string
          example: some-login
      responses:
        '200':
          description: The request was processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: accounts
      x-speakeasy-name-override: getSubaccount
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->accounts->getSubaccount(
                userLogin: 'some-login'
            );

            if ($response->accountResponse !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.accounts.getSubaccount({
                userLogin: "some-login",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/account/some-login",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/account/some-login",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/rest/account/some-login", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/account/some-login\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/account/some-login");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/account/some-login")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/account/some-login")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /messages/{ids}:
    get:
      tags:
        - Outgoing messages
      summary: Get the messages details and status by IDs
      description: "Check the current status and details of one or more messages using their `ids`. You have to pass an unique message *IDs* `array` containing message's id which details you want to fetch. This method will accept maximum 50 identifiers in one call.\r\n\r\nAs a successful result a `GetMessagesResponse` object will be returned containing `$messages` property with an `array` of `Message` objects, each object per single found message. `GetMessagesResponse` object will also contain `$headers` array property where you can find `X-Success-Count` (a count of messages which were found and returned correctly) and `X-Error-Count` (count of messages which were not found) elements."
      operationId: getMessages
      parameters:
        - $ref: '#/components/parameters/ids'
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check messages
            details in `$messages` array.
          headers:
            X-Success-Count:
              description: Count of messages processed correctly
              schema:
                type: integer
                example: '1'
            X-Error-Count:
              description: Count of messages processed with errors
              schema:
                type: integer
                example: '0'
          content:
            application/json:
              schema:
                description: Array of sent messages
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: outgoing
      x-speakeasy-name-override: getByIds
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->outgoing->getByIds(
                ids: [
                    43456,
                ]
            );

            if ($response->messages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.outgoing.getByIds({
                ids: [
                  43456,
                ],
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/messages/{ids}",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/messages/{ids}",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/rest/messages/{ids}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/messages/{ids}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/messages/{ids}");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/messages/{ids}")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/messages/{ids}")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
    delete:
      tags:
        - Outgoing messages
      summary: Cancel a scheduled messages
      description: "Cancel messages using their `ids` which were scheduled to be sent at a specific time. You have to pass an `array` of the unique message IDs, which were returned after sending a message. This method will accept maximum 50 identifiers in one call. You can cancel only messages with *SCHEDULED* status.\r\n \r\nAs a successful result a `CancelMessagesResponse` object will be returned, with `$cancelledMessages` property containing array of `CancelledMessage` object. The `status` property of each `CancelledMessage` object will contain a status code of operation - `204` if a particular message was cancelled successfully and other code if an error occured.\r\n \r\n`CancelMessagesResponse` object will also contain `$headers` array property where you can find `X-Success-Count` (a count of messages which were cancelled successfully), `X-Error-Count` (count of messages which were not cancelled) and `X-Sandbox` (if a request was made in Sandbox or Production system) elements."
      operationId: cancelMessages
      parameters:
        - $ref: '#/components/parameters/ids'
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check the status of
            messages cancellation in `$cancelledMessages` array.
          headers:
            X-Success-Count:
              description: Count of messages processed correctly
              schema:
                type: integer
                example: 1
            X-Error-Count:
              description: Count of messages processed with errors
              schema:
                type: integer
                example: 0
            X-Sandbox:
              description: >-
                Determines whether the request was processed in the SANDBOX test
                system
              schema:
                type: boolean
                example: false
          content:
            application/json:
              schema:
                description: Array of cancelled messages
                type: array
                items:
                  $ref: '#/components/schemas/CancelledMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: outgoing
      x-speakeasy-name-override: cancelScheduled
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->outgoing->cancelScheduled(
                ids: [
                    43456,
                ]
            );

            if ($response->cancelledMessages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.outgoing.cancelScheduled({
                ids: [
                  43456,
                ],
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/messages/{ids}",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/messages/{ids}",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("DELETE", "/rest/messages/{ids}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/messages/{ids}\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/messages/{ids}");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.delete("https://api.gsmservice.pl/rest/messages/{ids}")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/messages/{ids}")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /incoming:
    get:
      tags:
        - Incoming messages
      summary: List the received SMS messages
      description: "Get the details of all received messages from your account incoming messages box. This method supports pagination so you have to pass as parameters `$page` value (number of page with received messages which you want to access) and a `$limit` value (max of received messages per page). Messages are fetched from the latest one. This method will accept maximum **50** as `$limit` parameter value.\r\n\r\nAs a successful result a `ListIncomingMessagesResponse` object will be returned with an array of `IncomingMessage` as `$incomingMessages` property, each object per single received message. `ListIncomingMessagesResponse` object will contain also a `$headers` array property where you can find `X-Total-Results` (a total count of all received messages which are available in incoming box on your account), `X-Total-Pages` (a total number of all pages with results), `X-Current-Page` (A current page number) and `X-Limit` (messages count per single page) elements."
      operationId: listIncomingMessages
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check received
            messages details in `$incomingMessages` array.
          headers:
            X-Total-Results:
              description: Total Results
              schema:
                type: integer
                example: 1
            X-Total-Pages:
              description: Total number of results pages
              schema:
                type: integer
                example: 1
            X-Current-Page:
              description: Current results page number
              schema:
                type: integer
                example: 1
            X-Limit:
              description: Message limit per results page
              schema:
                type: integer
                example: 10
          content:
            application/json:
              schema:
                description: Array of received messages
                type: array
                items:
                  $ref: '#/components/schemas/IncomingMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: incoming
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->incoming->list(
                page: 1,
                limit: 10

            );

            if ($response->incomingMessages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.incoming.list({
                page: 1,
                limit: 10,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/incoming?page=1&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/incoming?page=1&limit=10",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.gsmservice.pl")


            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "/rest/incoming?page=1&limit=10",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/incoming?page=1&limit=10\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/incoming?page=1&limit=10");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/incoming?page=1&limit=10")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/incoming?page=1&limit=10")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /incoming/{ids}:
    get:
      tags:
        - Incoming messages
      summary: Get the incoming messages by IDs
      description: "Get the details of one or more received messages using their `ids`. This method accepts an `array` of the unique incoming message *IDs*, which were given while receiving a messages. The method will accept maximum 50 identifiers in one call.\r\n\r\nAs a successful result a `GetIncomingMessagesResponse` object will be returned with an array of `IncomingMessage` as `$incomingMessages` property, each object per single received message. `GetIncomingMessagesResponse` object will contain also a `$headers` array property where you can find `X-Success-Count` (a count of incoming messages which were found and returned correctly) and `X-Error-Count` (count of incoming messages which were not found) elements."
      operationId: getIncomingMessages
      parameters:
        - $ref: '#/components/parameters/ids'
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check received
            messages details in `$incomingMessages` array.
          headers:
            X-Success-Count:
              description: Count of incoming messages processed correctly
              schema:
                type: integer
                example: '1'
            X-Error-Count:
              description: Count of incoming messages processed with errors
              schema:
                type: integer
                example: '0'
          content:
            application/json:
              schema:
                description: Array of received messages
                type: array
                items:
                  $ref: '#/components/schemas/IncomingMessage'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: incoming
      x-speakeasy-name-override: getByIds
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->incoming->getByIds(
                ids: [
                    43456,
                ]
            );

            if ($response->incomingMessages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.incoming.getByIds({
                ids: [
                  43456,
                ],
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/incoming/{ids}",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/incoming/{ids}",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/rest/incoming/{ids}", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/incoming/{ids}\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/incoming/{ids}");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/incoming/{ids}")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/incoming/{ids}")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /ping:
    get:
      tags:
        - Common
      summary: Checks API availability and version
      description: "Check the API connection and the current API availability status. Also you will get the current API version number. The method doesn't accept any parameters.\r\n\r\nAs a successful result a `PingResponse` object will be returned."
      operationId: ping
      responses:
        '200':
          description: API service is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '503':
          description: API service is unavailable
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      security: []
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $sdk = Gateway\Client::builder()->build();



            $response = $sdk->common->ping(

            );

            if ($response->pingResponse !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client();

            async function run() {
              const result = await client.common.ping();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/ping",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/ping",
              "headers": {}
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            conn.request("GET", "/rest/ping")

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/ping\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: |-
            var client = new RestClient("https://api.gsmservice.pl/rest/ping");
            var request = new RestRequest(Method.GET);
            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/ping")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/ping")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)

            response = http.request(request)
            puts response.read_body
  /messages/sms/price:
    post:
      tags:
        - Outgoing messages
      summary: Check the price of SMS Messages
      description: "Check the price of single or multiple SMS messages at the same time before sending them. You can pass as a parameter `Sms` object (for single message) or `array` of `Sms` objects (for multiple messages). Each `Sms` object has several properties, describing message parameters such as recipient phone number, content of the message, type, etc.\r\nThe method will accept maximum **100** messages in one call.\r\n\r\nAs a successful result a `GetSmsPriceResponse` object will be returned with `$prices` property containing array of `Price` objects, one object per each single message. You should check the `error` property of each message in a response body to make sure which were priced successfully and which finished with an error. Successfully priced messages will have `null` value of `error` property.\r\n\r\n`GetSmsPriceResponse` object will include also `$headers` array with `X-Success-Count` (a count of messages which were processed successfully) and `X-Error-Count` (count of messages which were rejected) elements."
      operationId: getSmsPrice
      requestBody:
        description: >-
          To check the price of a single message or messages with the same content
          to multiple recipients, pass as method param a single `Sms` object
          with the properties of this message. To check the price of multiple
          messages with different content at the same time, pass as method param an `array` of `Sms` objects with the properties of each message.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Sms'
                - title: Array of SMS
                  type: array
                  items:
                    $ref: '#/components/schemas/Sms'
                  maxItems: 100
                  minItems: 1
            examples:
              single:
                summary: SMS to single recipient
                description: >-
                  Example of checking the price of a single message to one
                  recipient.
                value:
                  recipients: '+48999999999'
                  message: This is SMS message content.
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              bulk:
                summary: SMS with different content to multiple recipients
                description: >-
                  Example of checking the price of multiple messages with
                  different content to multiple recipients. Maximum number of
                  messages in one request: 100. Please split larger volumes into
                  separate calls.
                value:
                  - recipients: '+48999999999'
                    message: This is first SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
                    flash: false
                  - recipients: '+48999888777'
                    message: This is second SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
              multi:
                summary: SMS with the same content to multiple recipients
                description: >-
                  Example of checking the price of multiple messages with the
                  same content to multiple recipients. Maximum number of
                  messages in one request: 100. Please split larger volumes into
                  separate calls.
                value:
                  recipients:
                    - '+48999999999'
                    - '+48999888777'
                  message: This is SMS message content.
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              single_cid:
                summary: SMS to single recipient with custom message ID (cid)
                description: >-
                  Example of checking the price of a single message to one
                  recipient. Contains the "cid" property, which specifies the
                  user-defined identifier for the message.
                value:
                  recipients:
                    nr: '+48999999999'
                    cid: custom-id-A44445T
                  message: This is SMS message content
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              bulk_cid:
                summary: >-
                  SMS with different content to multiple recipients with custom
                  message IDs (cid)
                description: >-
                  Example of checking the price of multiple messages with
                  different content to multiple recipients. Maximum number of
                  messages in one request: 100. Please split larger volumes into
                  separate calls. Contains the "cid" properties, which specifies
                  the user-defined identifier for messages.
                value:
                  - recipients:
                      nr: '+48999999999'
                      cid: custom-id-A44445T
                    message: This is first SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
                    flash: false
                  - recipients:
                      nr: '+48999888777'
                      cid: custom-id-F44445R
                    message: This is second SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
              multi_cid:
                summary: >-
                  SMS with the same content to multiple recipients with custom
                  message IDs (cid)
                description: >-
                  Example of checking the price of multiple messages with the
                  same content to multiple recipients. Maximum number of
                  messages in one request: 100. Please split larger volumes into
                  separate calls. Contains the "cid" properties, which specifies
                  the user-defined identifier for messages.
                value:
                  recipients:
                    - nr: '+48999999999'
                      cid: custom-id-A44445T
                    - nr: '+48999888777'
                      cid: custom-id-F44445R
                  message: This is SMS message content
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check the price and
            the details of particular messages in `$prices`
          headers:
            X-Success-Count:
              description: Count of messages processed correctly
              schema:
                type: integer
                example: 1
            X-Error-Count:
              description: Count of messages processed with errors
              schema:
                type: integer
                example: 0
          content:
            application/json:
              schema:
                description: Array of checked messages
                type: array
                items:
                  $ref: '#/components/schemas/Price'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: outgoing.sms
      x-speakeasy-name-override: getPrice
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;
            use Gsmservice\Gateway\Models\Components;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();

            $request = [
                new Components\Sms(
                    recipients: new Components\PhoneNumberWithCid(
                        nr: '+48999999999',
                        cid: 'my-id-1113',
                    ),
                    message: 'To jest treść wiadomości',
                    sender: 'Bramka SMS',
                    type: Components\SmsType::SmsPro,
                    unicode: true,
                    flash: false,
                    date: null,
                ),
            ];

            $response = $sdk->outgoing->sms->getPrice(
                request: $request
            );

            if ($response->prices !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.outgoing.sms.getPrice([
                {
                  recipients: {
                    nr: "+48999999999",
                    cid: "my-id-1113",
                  },
                  message: "To jest treść wiadomości",
                  sender: "Bramka SMS",
                  type: 1,
                  unicode: true,
                  flash: false,
                  date: null,
                },
              ]);

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/messages/sms/price",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"recipients\":\"+48999999999\",\"message\":\"To jest treść wiadomości\",\"sender\":\"Bramka SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/messages/sms/price",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              recipients: '+48999999999',
              message: 'To jest treść wiadomości',
              sender: 'Bramka SMS',
              type: 1,
              unicode: true,
              flash: false,
              date: null
            }));
            req.end();
        - lang: Python 3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.gsmservice.pl")


            payload = "{\"recipients\":\"+48999999999\",\"message\":\"To jest
            treść wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}"


            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/rest/messages/sms/price", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/messages/sms/price\"\n\n\tpayload := strings.NewReader(\"{\\\"recipients\\\":\\\"+48999999999\\\",\\\"message\\\":\\\"To jest treść wiadomości\\\",\\\"sender\\\":\\\"Bramka SMS\\\",\\\"type\\\":1,\\\"unicode\\\":true,\\\"flash\\\":false,\\\"date\\\":null}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/messages/sms/price");

            var request = new RestRequest(Method.POST);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            request.AddHeader("content-type", "application/json");

            request.AddParameter("application/json",
            "{\"recipients\":\"+48999999999\",\"message\":\"To jest treść
            wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.post("https://api.gsmservice.pl/rest/messages/sms/price")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"recipients\":\"+48999999999\",\"message\":\"To jest treść wiadomości\",\"sender\":\"Bramka SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}")
              .asString();
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://api.gsmservice.pl/rest/messages/sms/price")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            request["content-type"] = 'application/json'

            request.body = "{\"recipients\":\"+48999999999\",\"message\":\"To
            jest treść wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}"


            response = http.request(request)

            puts response.read_body
  /messages/sms:
    post:
      tags:
        - Outgoing messages
      summary: Send SMS Messages
      description: "Send single or multiple SMS messages at the same time. You can pass as a parameter `Sms` object (for single message) or `array` of `Sms` objects (for multiple messages). Each `Sms` object has several properties, describing message parameters such recipient phone number, content of the message, type or scheduled sending date, etc. This method will accept maximum 100 messages in one call.\r\n\r\nAs a successful result a `SendSmsResponse` object will be returned with an `array` with `$messages` property containing array of `Message` objects, one object per each single message. You should check the `statusCode` property of each message in a response body to make sure which were accepted by gateway (queued) and which were rejected. In case of rejection, `statusDescription` property will include a reason.\r\n\r\n`SendSmsResponse` will also include `$headers` array with `X-Success-Count` (a count of messages which were processed successfully), `X-Error-Count` (count of messages which were rejected) and `X-Sandbox` (if a request was made in Sandbox or Production system) elements."
      operationId: sendSms
      requestBody:
        description: >-
          To send a single SMS or messages with the same content to multiple
          recipients, pass as the method param a single `Sms` object with the
          properties of this message. To send multiple messages with different
          content at the same time, pass as the method param an `array` of `Sms`
          objects with the properties of each message.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Sms'
                - title: Array of SMS
                  type: array
                  items:
                    $ref: '#/components/schemas/Sms'
                  maxItems: 100
                  minItems: 1
            examples:
              single:
                summary: SMS to single recipient
                description: Example of sending a single message to one recipient.
                value:
                  recipients: '+48999999999'
                  message: This is SMS message content.
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              bulk:
                summary: SMS with different content to multiple recipients
                description: >-
                  Example of sending multiple messages with different content to
                  multiple recipients. Maximum number of messages in one
                  request: 100. Please split larger volumes into separate calls.
                value:
                  - recipients: '+48999999999'
                    message: This is first SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
                    flash: false
                  - recipients: '+48999888777'
                    message: This is second SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
              multi:
                summary: SMS with the same content to multiple recipients
                description: >-
                  Example of sending multiple messages with the same content to
                  multiple recipients. Maximum number of messages in one
                  request: 100. Please split larger volumes into separate calls.
                value:
                  recipients:
                    - '+48999999999'
                    - '+48999888777'
                  message: This is SMS message content.
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              single_cid:
                summary: SMS to single recipient with custom message ID (cid)
                description: >-
                  Example of sending a single message to one recipient. Contains
                  the "cid" property, which specifies the user-defined
                  identifier for the message.
                value:
                  recipients:
                    nr: '+48999999999'
                    cid: custom-id-A44445T
                  message: This is SMS message content
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
              bulk_cid:
                summary: >-
                  SMS with different content to multiple recipients with custom
                  message IDs (cid)
                description: >-
                  Example of sending multiple messages with different content to
                  multiple recipients. Maximum number of messages in one
                  request: 100. Please split larger volumes into separate calls.
                  Contains the "cid" properties, which specifies the
                  user-defined identifier for messages.
                value:
                  - recipients:
                      nr: '+48999999999'
                      cid: custom-id-A44445T
                    message: This is first SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
                    flash: false
                  - recipients:
                      nr: '+48999888777'
                      cid: custom-id-F44445R
                    message: This is second SMS message content
                    sender: Bramka SMS
                    type: 1
                    unicode: true
              multi_cid:
                summary: >-
                  SMS with the same content to multiple recipients with custom
                  message IDs (cid)
                description: >-
                  Example of sending multiple messages with the same content to
                  multiple recipients. Maximum number of messages in one
                  request: 100. Please split larger volumes into separate calls.
                  Contains the "cid" properties, which specifies the
                  user-defined identifier for messages.
                value:
                  recipients:
                    - nr: '+48999999999'
                      cid: custom-id-A44445T
                    - nr: '+48999888777'
                      cid: custom-id-F44445R
                  message: This is SMS message content
                  sender: Bramka SMS
                  type: 1
                  unicode: true
                  flash: false
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check statuses of
            particular messages in `$messages` array.
          headers:
            X-Success-Count:
              description: Count of messages processed correctly
              schema:
                type: integer
                example: 1
            X-Error-Count:
              description: Count of messages processed with errors
              schema:
                type: integer
                example: 0
            X-Sandbox:
              description: >-
                Determines whether the request was processed in the SANDBOX test
                system
              schema:
                type: boolean
                example: false
          content:
            application/json:
              schema:
                description: Array of sent messages
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: outgoing.sms
      x-speakeasy-name-override: send
      x-speakeasy-usage-example:
        title: Sending single SMS Message
        description: >-
          This example demonstrates simple sending SMS message to a single
          recipient:
        position: 1
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;
            use Gsmservice\Gateway\Models\Components;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();

            $request = [
                new Components\Sms(
                    recipients: [
                        '+48999999999',
                    ],
                    message: 'To jest treść wiadomości',
                    sender: 'Bramka SMS',
                    type: Components\SmsType::SmsPro,
                    unicode: true,
                    flash: false,
                    date: null,
                ),
            ];

            $response = $sdk->outgoing->sms->send(
                request: $request
            );

            if ($response->messages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.outgoing.sms.send([
                {
                  recipients: [
                    "+48999999999",
                  ],
                  message: "To jest treść wiadomości",
                  sender: "Bramka SMS",
                  type: 1,
                  unicode: true,
                  flash: false,
                  date: null,
                },
              ]);

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/messages/sms",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"recipients\":\"+48999999999\",\"message\":\"To jest treść wiadomości\",\"sender\":\"Bramka SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/messages/sms",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              recipients: '+48999999999',
              message: 'To jest treść wiadomości',
              sender: 'Bramka SMS',
              type: 1,
              unicode: true,
              flash: false,
              date: null
            }));
            req.end();
        - lang: Python 3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.gsmservice.pl")


            payload = "{\"recipients\":\"+48999999999\",\"message\":\"To jest
            treść wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}"


            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/rest/messages/sms", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/messages/sms\"\n\n\tpayload := strings.NewReader(\"{\\\"recipients\\\":\\\"+48999999999\\\",\\\"message\\\":\\\"To jest treść wiadomości\\\",\\\"sender\\\":\\\"Bramka SMS\\\",\\\"type\\\":1,\\\"unicode\\\":true,\\\"flash\\\":false,\\\"date\\\":null}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/messages/sms");

            var request = new RestRequest(Method.POST);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            request.AddHeader("content-type", "application/json");

            request.AddParameter("application/json",
            "{\"recipients\":\"+48999999999\",\"message\":\"To jest treść
            wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}",
            ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.post("https://api.gsmservice.pl/rest/messages/sms")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"recipients\":\"+48999999999\",\"message\":\"To jest treść wiadomości\",\"sender\":\"Bramka SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}")
              .asString();
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://api.gsmservice.pl/rest/messages/sms")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            request["content-type"] = 'application/json'

            request.body = "{\"recipients\":\"+48999999999\",\"message\":\"To
            jest treść wiadomości\",\"sender\":\"Bramka
            SMS\",\"type\":1,\"unicode\":true,\"flash\":false,\"date\":null}"


            response = http.request(request)

            puts response.read_body
  /senders:
    get:
      tags:
        - Senders
      summary: List allowed senders names
      description: "Get a list of allowed senders defined in your account. The methot doesn't get any parameters.\r\n\r\nAs a successful result a `ListSendersResponse` object will be returned with an array of `Sender` as `$senders` property, each object per single sender."
      operationId: listSenders
      responses:
        '200':
          description: >-
            The request was processed successfully. Please find senders details
            in `$senders` array
          content:
            application/json:
              schema:
                description: Array od messages senders
                type: array
                items:
                  $ref: '#/components/schemas/Sender'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: senders
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->senders->list(

            );

            if ($response->senders !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.senders.list();

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/senders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/senders",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("GET", "/rest/senders", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/senders\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/senders");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/senders")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/senders")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
    post:
      tags:
        - Senders
      summary: Add a new sender name
      description: "Define a new allowed sender on your account. You should pass as parameter a `SenderInput` object with two properties: `sender` (defines sender name) and `description`. Please carefully fill this property with the extensive description of a sender name (what will be its use, what the name mean, etc).\r\n\r\nAs a successful result a `AddSenderResponse` object will be returned with a property `$sender` containing a `Sender` object with details and status of added sender name."
      operationId: addSender
      requestBody:
        description: >-
          To add a new sender in the request body pass a `SenderInput` object with the
          properties of the sender.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sender'
      responses:
        '201':
          description: The request was processed successfully (sender created)
          headers:
            X-Sandbox:
              description: >-
                Determines whether the request was processed in the SANDBOX test
                system
              schema:
                type: boolean
                example: false
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sender'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: senders
      x-speakeasy-name-override: add
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;
            use Gsmservice\Gateway\Models\Components;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();

            $request = new Components\SenderInput(
                sender: 'Bramka SMS',
                description: 'This is our company name. It contains our registered trademark.',
            );

            $response = $sdk->senders->add(
                request: $request
            );

            if ($response->sender !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.senders.add({
                sender: "Bramka SMS",
                description: "This is our company name. It contains our registered trademark.",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/senders",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\"sender\":\"Bramka SMS\",\"description\":\"This is our company name. It contains our registered trademark.\"}",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN",
                "content-type: application/json"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "POST",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/senders",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN",
                "content-type": "application/json"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.write(JSON.stringify({
              sender: 'Bramka SMS',
              description: 'This is our company name. It contains our registered trademark.'
            }));
            req.end();
        - lang: Python 3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.gsmservice.pl")


            payload = "{\"sender\":\"Bramka SMS\",\"description\":\"This is our
            company name. It contains our registered trademark.\"}"


            headers = {
                'Authorization': "Bearer REPLACE_BEARER_TOKEN",
                'content-type': "application/json"
                }

            conn.request("POST", "/rest/senders", payload, headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/senders\"\n\n\tpayload := strings.NewReader(\"{\\\"sender\\\":\\\"Bramka SMS\\\",\\\"description\\\":\\\"This is our company name. It contains our registered trademark.\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/senders");

            var request = new RestRequest(Method.POST);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            request.AddHeader("content-type", "application/json");

            request.AddParameter("application/json", "{\"sender\":\"Bramka
            SMS\",\"description\":\"This is our company name. It contains our
            registered trademark.\"}", ParameterType.RequestBody);

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.post("https://api.gsmservice.pl/rest/senders")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .header("content-type", "application/json")
              .body("{\"sender\":\"Bramka SMS\",\"description\":\"This is our company name. It contains our registered trademark.\"}")
              .asString();
        - lang: Ruby
          source: >-
            require 'uri'

            require 'net/http'

            require 'openssl'


            url = URI("https://api.gsmservice.pl/rest/senders")


            http = Net::HTTP.new(url.host, url.port)

            http.use_ssl = true

            http.verify_mode = OpenSSL::SSL::VERIFY_NONE


            request = Net::HTTP::Post.new(url)

            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            request["content-type"] = 'application/json'

            request.body = "{\"sender\":\"Bramka SMS\",\"description\":\"This is
            our company name. It contains our registered trademark.\"}"


            response = http.request(request)

            puts response.read_body
  /senders/{sender}:
    delete:
      tags:
        - Senders
      summary: Delete a sender name
      description: "Removes defined sender name from your account. This method accepts **sender name** as parameter. Sender name will be deleted immediately.\r\n\r\nAs a successful response a `DeleteSenderResponse` will be returned with `$statusCode` = *204* property."
      operationId: deleteSender
      parameters:
        - name: sender
          in: path
          description: Sender name to be removed
          required: true
          schema:
            type: string
          example: Podpis
      responses:
        '204':
          description: The sender was deleted successfully
          headers:
            X-Sandbox:
              description: >-
                Determines whether the request was processed in the SANDBOX test
                system
              schema:
                type: boolean
                example: false
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: senders
      x-speakeasy-name-override: delete
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->senders->delete(
                sender: 'Podpis'
            );

            if ($response->statusCode === 200) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.senders.delete({
                sender: "Podpis",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/senders/Podpis",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "DELETE",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "DELETE",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/senders/Podpis",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("DELETE", "/rest/senders/Podpis", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/senders/Podpis\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/senders/Podpis");

            var request = new RestRequest(Method.DELETE);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.delete("https://api.gsmservice.pl/rest/senders/Podpis")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/senders/Podpis")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Delete.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
    patch:
      tags:
        - Senders
      summary: Set default sender name
      description: "Set default sender name to one of the senders names already defined on your account. This method accepts a **sender name** parameter to set it as default on your account.\r\n\r\nAs a successful response a `SetDefaultSenderResponse` will be returned with `$statusCode` = **204** property."
      operationId: setDefaultSender
      parameters:
        - name: sender
          in: path
          description: Sender name to set as default
          required: true
          schema:
            type: string
          example: Podpis
      responses:
        '204':
          description: The default sender name has been set succesfully
          headers:
            X-Sandbox:
              description: >-
                Determines whether the request was processed in the SANDBOX test
                system
              schema:
                type: boolean
                example: false
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Sender name was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: senders
      x-speakeasy-name-override: setDefault
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->senders->setDefault(
                sender: 'Podpis'
            );

            if ($response->statusCode === 200) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.senders.setDefault({
                sender: "Podpis",
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/senders/Podpis",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "PATCH",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "PATCH",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/senders/Podpis",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: |-
            import http.client

            conn = http.client.HTTPSConnection("api.gsmservice.pl")

            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }

            conn.request("PATCH", "/rest/senders/Podpis", headers=headers)

            res = conn.getresponse()
            data = res.read()

            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/senders/Podpis\"\n\n\treq, _ := http.NewRequest(\"PATCH\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/senders/Podpis");

            var request = new RestRequest(Method.PATCH);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.patch("https://api.gsmservice.pl/rest/senders/Podpis")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/senders/Podpis")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Patch.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
  /messages:
    get:
      tags:
        - Outgoing messages
      summary: Lists the history of sent messages
      description: "Get the details and current status of all of sent messages from your account message history. This method supports pagination so you have to pass as parameters a `$page` value (number of page with messages which you want to access) and a `$limit` value (max of messages per page). Messages are fetched from the latest one. This method will accept maximum **50** as `$limit` parameter value.\r\n\r\nAs a successful result a `ListMessagesResponse` object will be returned containing `$messages` property with an `array` of `Message` objects, each object per single message. `ListMessagesResponse` will also contain `$headers` array property where you can find `X-Total-Results` (a total count of all messages which are available in history on your account), `X-Total-Pages` (a total number of all pages with results), `X-Current-Page` (A current page number) and `X-Limit` (messages count per single page) elements."
      operationId: listMessages
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: >-
            The request was processed successfully. Please check messages
            details in `$messages` array.
          headers:
            X-Total-Results:
              description: Total Results
              schema:
                type: integer
                example: 1
            X-Total-Pages:
              description: Total number of results pages
              schema:
                type: integer
                example: 1
            X-Current-Page:
              description: Current results page number
              schema:
                type: integer
                example: 1
            X-Limit:
              description: Message limit per results page
              schema:
                type: integer
                example: 10
          content:
            application/json:
              schema:
                description: Array of sent messages
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        4XX:
          $ref: '#/components/responses/GenericError'
        5XX:
          $ref: '#/components/responses/InternalError'
      x-speakeasy-group: outgoing
      x-speakeasy-name-override: list
      x-codeSamples:
        - lang: php
          label: PHP 8 SDK
          source: |-
            declare(strict_types=1);

            require 'vendor/autoload.php';

            use Gsmservice\Gateway;

            $security = '<YOUR API ACCESS TOKEN>';

            $sdk = Gateway\Client::builder()->setSecurity($security)->build();



            $response = $sdk->outgoing->list(
                page: 1,
                limit: 10

            );

            if ($response->messages !== null) {
                // handle response
            }
        - lang: php
          label: Typescript SDK
          source: |-
            import { Client } from "@gsmservice-pl/messaging-sdk-typescript";

            const client = new Client({
              bearer: process.env["GATEWAY_API_BEARER"] ?? "",
            });

            async function run() {
              const result = await client.outgoing.list({
                page: 1,
                limit: 10,
              });

              // Handle the result
              console.log(result);
            }

            run();
        - lang: PHP (cURL)
          source: |-
            <?php

            $curl = curl_init();

            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.gsmservice.pl/rest/messages?page=1&limit=10",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "Authorization: Bearer REPLACE_BEARER_TOKEN"
              ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Node
          source: |-
            const http = require("https");

            const options = {
              "method": "GET",
              "hostname": "api.gsmservice.pl",
              "port": null,
              "path": "/rest/messages?page=1&limit=10",
              "headers": {
                "Authorization": "Bearer REPLACE_BEARER_TOKEN"
              }
            };

            const req = http.request(options, function (res) {
              const chunks = [];

              res.on("data", function (chunk) {
                chunks.push(chunk);
              });

              res.on("end", function () {
                const body = Buffer.concat(chunks);
                console.log(body.toString());
              });
            });

            req.end();
        - lang: Python 3
          source: >-
            import http.client


            conn = http.client.HTTPSConnection("api.gsmservice.pl")


            headers = { 'Authorization': "Bearer REPLACE_BEARER_TOKEN" }


            conn.request("GET", "/rest/messages?page=1&limit=10",
            headers=headers)


            res = conn.getresponse()

            data = res.read()


            print(data.decode("utf-8"))
        - lang: Go
          source: "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api.gsmservice.pl/rest/messages?page=1&limit=10\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
        - lang: C# (RestSharp)
          source: >-
            var client = new
            RestClient("https://api.gsmservice.pl/rest/messages?page=1&limit=10");

            var request = new RestRequest(Method.GET);

            request.AddHeader("Authorization", "Bearer REPLACE_BEARER_TOKEN");

            IRestResponse response = client.Execute(request);
        - lang: JAVA (UniRest)
          source: >-
            HttpResponse<String> response =
            Unirest.get("https://api.gsmservice.pl/rest/messages?page=1&limit=10")
              .header("Authorization", "Bearer REPLACE_BEARER_TOKEN")
              .asString();
        - lang: Ruby
          source: |-
            require 'uri'
            require 'net/http'
            require 'openssl'

            url = URI("https://api.gsmservice.pl/rest/messages?page=1&limit=10")

            http = Net::HTTP.new(url.host, url.port)
            http.use_ssl = true
            http.verify_mode = OpenSSL::SSL::VERIFY_NONE

            request = Net::HTTP::Get.new(url)
            request["Authorization"] = 'Bearer REPLACE_BEARER_TOKEN'

            response = http.request(request)
            puts response.read_body
components:
  schemas:
    AccountResponse:
      description: An object containing information about the User's account and balance
      properties:
        login:
          description: User Login
          type: string
          example: some_login
        account_type:
          description: Account type
          type: string
          enum:
            - PRE-PAID
            - POST-PAID
          example: PRE-PAID
        limit:
          description: Acount limit
          type: number
          format: float
          example: 0
        credit:
          description: Current account balance
          type: number
          format: float
          example: 130.44
        subcredit:
          description: Subaccount credit balance (null if unlimited)
          type: number
          format: float
          example: 65.32
          nullable: true
        currency:
          description: Account currency
          type: string
          example: PLN
        name:
          description: User name and surname
          type: string
          example: Andrzej Nowak
        is_main:
          description: Is main account?
          type: boolean
          example: true
      type: object
    CancelledMessage:
      description: >-
        An  object containing information about results of cancelling single
        message
      properties:
        id:
          description: Message ID
          type: integer
          example: 43456
        status:
          description: >-
            Status of cancellation (204 if cancelled successfully or error
            status code)
          type: integer
          example: 400
        error:
          $ref: '#/components/schemas/ErrorResponse'
      type: object
    ErrorResponse:
      description: >-
        An object that complies with RFC 9457 containing information about a
        request error
      properties:
        type:
          title: URI reference for problem type
          description: A URI reference that identifies the problem type
          type: string
          format: uri
          example: https://problems-registry.smartbear.com/invalid-body-property-format
        status:
          title: HTTP status code
          description: >-
            The HTTP status code generated by the origin server for this
            occurrence of the problem
          type: integer
          example: 400
        title:
          title: Error summary
          description: A short, human-readable summary of the problem type
          type: string
          example: Invalid Body property format
        detail:
          title: Error description
          description: >-
            A human-readable explanation specific to this occurrence of the
            problem
          type: string
          example: The request body contains a malformed property
        code:
          title: Internal API error code
          description: >-
            An API specific error code aiding the provider team understand the
            error based on their own potential taxonomy or registry
          type: string
          example: 400-21
        instance:
          title: URI reference for occurrence of the problem
          description: >-
            A URI reference that identifies the specific occurrence of the
            problem
          type: string
          format: uri
          example: /rest/messages/sms
      type: object
      nullable: true
    IncomingMessage:
      description: An object with the properties of the received message
      properties:
        id:
          description: Unique identifier of incoming message
          type: integer
          example: 45544
        login:
          description: Login of the account (sub-account) on which the message was received
          type: string
          example: some-user
        recipient:
          description: Recipient number (or service name)
          type: string
          example: '+48999000555'
        sender:
          description: Message sender number (or alphanumeric name)
          type: string
          example: '+48999888777'
        phonebook_sender_name:
          description: Sender name (matched with phonebook)
          type: string
          example: Jan Nowak
          nullable: true
        date:
          description: Date and time of message receipt in ISO 8601 format
          type: string
          format: date-time
          example: '2024-05-31T05:17:35Z'
        message:
          description: Received message content
          type: string
          example: To jest treść odebranego SMSa
        dedicated_number:
          description: >-
            Dedicated Mobile Originated service number (if the message was
            received on this number)
          type: string
          example: '+48111222444'
          nullable: true
        dedicated_prefix:
          description: >-
            Dedicated Mobile Originated service prefix (if the message was
            received on this number with such prefix)
          type: string
          example: LATO
          nullable: true
      type: object
    Message:
      description: An object defining the properties of a single message
      properties:
        id:
          description: Unique message identifier
          type: integer
          example: 323234
          nullable: true
        cid:
          description: Custom message ID assigned by the User
          type: string
          example: custom-id-A44445T
          nullable: true
        type:
          $ref: '#/components/schemas/MessageType'
        recipient:
          $ref: '#/components/schemas/PhoneNumber'
        sender:
          description: Message sender name
          type: string
          example: Bramka SMS
          nullable: true
        parts:
          description: The count of parts that message consists of
          type: integer
          example: 1
          nullable: true
        sent_date:
          description: Sending date and time (in ISO 8601 format)
          type: string
          format: date-time
          example: '2024-06-01T16:22:05Z'
          nullable: true
        status_date:
          description: Date and time of last status change (in ISO 8601 format)
          type: string
          format: date-time
          example: '2024-06-01T16:22:07Z'
          nullable: true
        status_code:
          description: Message status code
          type: string
          example: QUEUED
        status_description:
          description: Human redable description of message status
          type: string
          example: The message has been accepted
        unicode:
          description: Did the message contain special characters, e.g. Polish diacritics?
          type: boolean
          example: true
        flash:
          description: Was the message sent with class 0 (FLASH)?
          type: boolean
          example: false
        price:
          description: The price of message (in PLN)
          type: number
          format: float
          example: 0.16
      type: object
    MessageType:
      description: "Message type according to the table:\r\n\r\n|type|Description|\r\n|----|-----------|\r\n|  SmsType::SmsPro | SMS PRO   |\r\n|  SmsType::SmsEco | SMS ECO   |\r\n|  SmsType::SmsTwoWay | SMS 2WAY  |\r\n| SmsType::Mms | MMS       |"
      type: integer
      enum:
        - 1
        - 3
        - 4
        - 10
      example: 1
      x-speakeasy-unknown-values: allow
      x-speakeasy-enums:
        - SmsPro
        - SmsEco
        - SmsTwoWay
        - Mms
    PhoneNumber:
      title: string
      description: >-
        A telephone number in international format (with a plus sign and the
        country code at the beginning, e.g. +48 for Poland)
      type: string
      maxLength: 16
      minLength: 7
      pattern: ^\+[0-9]+$
      example: '+48999999999'
    PhoneNumberWithCid:
      description: >-
        An object defining the message recipient telephone number with the
        message's custom identifier assigned by the User
      required:
        - nr
      properties:
        nr:
          $ref: '#/components/schemas/PhoneNumber'
        cid:
          description: Custom message ID assigned by the User
          type: string
          maxLength: 32
          example: my-id-1113
      type: object
    PingResponse:
      description: '''Ping'' response object'
      properties:
        status:
          description: 'API service status: OK - API available, ERR - API unavailable'
          type: string
          example: OK
        version:
          description: Current API Version
          type: string
          example: '1.0'
        sandbox:
          description: Was the connection established with the test system (SANDBOX)?
          type: boolean
          example: false
      type: object
    Price:
      description: An object with the properties and price of a single message
      properties:
        error:
          description: Information about a possible error
          type: string
          example: null
          nullable: true
        cid:
          description: Custom message ID assigned by the User
          type: string
          example: custom-id-A44445T
          nullable: true
        type:
          $ref: '#/components/schemas/MessageType'
        recipient:
          oneOf:
            - $ref: '#/components/schemas/PhoneNumber'
          nullable: true
          type: string
        sender:
          description: Message sender name
          type: string
          example: Bramka SMS
          nullable: true
        parts:
          description: The count of parts that message consists of
          type: integer
          example: 1
          nullable: true
        unicode:
          description: Did the message contain special characters, e.g. Polish diacritics?
          type: boolean
          example: true
        flash:
          description: Was the message sent with class 0 (FLASH)?
          type: boolean
          example: false
        price:
          description: The price of message (in PLN)
          type: number
          format: float
          example: 0.16
      type: object
    Sender:
      description: An object with the properties of the message sender
      required:
        - sender
        - description
        - status
        - is_default
      properties:
        sender:
          description: Message sender name
          type: string
          maxLength: 11
          minLength: 2
          example: Bramka SMS
        description:
          description: >-
            Description of the purpose of the sender name (required when adding
            new sender name)
          type: string
          writeOnly: true
          example: This is our company name. It contains our registered trademark.
        status:
          description: Sender name status
          type: string
          readOnly: true
          example: Active
        is_default:
          description: Is the sender default?
          type: boolean
          readOnly: true
          example: true
      type: object
    Sms:
      description: An object with a new SMS message properties
      required:
        - recipients
        - message
      properties:
        recipients:
          description: >-
            The recipient number or multiple recipients numbers of single
            message. To set one recipient, simply pass here a `string` with his
            phone number. To set multiple recipients, pass here a simple `array`
            of `string`. Optionally you can also set custom id (user identifier)
            for each message - pass `PhoneNumberWithCid` object (in case of
            single recipient) or `Array` of `PhoneNumberWithCid` (in case of
            multiple recipients).
          oneOf:
            - $ref: '#/components/schemas/PhoneNumber'
            - title: Array of strings
              type: array
              items:
                $ref: '#/components/schemas/PhoneNumber'
              maxItems: 100
              minItems: 1
            - $ref: '#/components/schemas/PhoneNumberWithCid'
            - title: Array of PhoneNumberWithCid
              type: array
              items:
                $ref: '#/components/schemas/PhoneNumberWithCid'
              maxItems: 100
              minItems: 1
        message:
          description: SMS message content
          type: string
          example: To jest treść wiadomości
        sender:
          description: SMS sender name
          type: string
          default: Bramka SMS
          maxLength: 11
          example: Bramka SMS
        type:
          $ref: '#/components/schemas/SmsType'
        unicode:
          description: >-
            Should the message be sent with special characters, e.g. Polish
            diacritics (if any)? If *false*, those characters will be
            automatically replaced with their equivalents. If *true* your
            message will be sent as **unicode** but the message will be able to
            consist of fewer characters.
          type: boolean
          default: false
          example: true
        flash:
          description: Should the message to be sent with class 0 (FLASH)?
          type: boolean
          default: false
          example: false
        date:
          description: >-
            Scheduled future date and time of sending the message (in ISO 8601
            format). If missing or null - message will be sent immediately
          type: string
          format: date-time
          default: null
          example: null
          nullable: true
      type: object
    SmsType:
      description: "SMS type according to the table\r\n    \r\n|type|Description|\r\n|----|-----------|\r\n|  SmsType::SmsPro |  SMS PRO  |\r\n|  SmsType::SmsEco |  SMS ECO  |\r\n|  SmsType::SmsTwoWay |  SMS 2WAY |"
      type: integer
      default: 1
      enum:
        - 1
        - 3
        - 4
      example: 1
      x-speakeasy-unknown-values: allow
      x-speakeasy-enums:
        - SmsPro
        - SmsEco
        - SmsTwoWay
  responses:
    InternalError:
      description: Internal API Server Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://problems-registry.smartbear.com/server-error/
            status: 500
            title: Internal API Server Error
            detail: There was an error on API Server side
            code: 500-1
            instance: /rest-sandbox/account/
    BadRequestError:
      description: There was an error in your request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedError:
      description: Unauthorized Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://problems-registry.smartbear.com/unauthorized/
            status: 401
            title: Unauthorized
            detail: >-
              Authorization token is invalid or missing and the requested
              resource could not be returned
            code: 401-7
            instance: /rest-sandbox/account/
    ForbiddenError:
      description: Access Denied Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://problems-registry.smartbear.com/forbidden/
            status: 403
            title: Access denied
            detail: >-
              Your account doesn't have sufficient permissions to access this
              resource
            code: 403-5
            instance: /rest-sandbox/account/
    NotFoundError:
      description: Not Found Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://problems-registry.smartbear.com/not-found/
            status: 404
            title: Not Found
            detail: The requested resource was not found
            code: 404-6
            instance: /rest-sandbox/account/
    GenericError:
      description: Generic Error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            type: https://problems-registry.smartbear.com/bad-request/
            status: 400
            title: Bad Request
            detail: The request is invalid
            code: 4XX-1
            instance: /rest-sandbox/account/
  parameters:
    ids:
      name: ids
      in: path
      description: >-
        Array of Message IDs assigned by the system. The system will
        accept a maximum of 50 identifiers in one call.
      required: true
      style: simple
      explode: true
      schema:
        type: array
        items:
          type: integer
          minimum: 1
          example: 43456
        maxItems: 50
        minItems: 1
    page:
      name: page
      in: query
      description: Page number of results
      schema:
        type: integer
        default: 1
        minimum: 1
        example: 1
    limit:
      name: limit
      in: query
      description: Number of results on one page
      schema:
        type: integer
        default: 10
        maximum: 50
        minimum: 1
        example: 10
  securitySchemes:
    Bearer:
      type: http
      description: >-
        API Access Token generated on your account
      bearerFormat: JWT
      scheme: bearer
      x-speakeasy-example: <YOUR API ACCESS TOKEN>
    User_Bearer:
      type: http
      description: A TOKEN supplied by User to authorize all Callback URL calls
      bearerFormat: JWT
      scheme: bearer
security:
  - Bearer: []
tags:
  - name: Outgoing messages
  - name: Incoming messages
  - name: Senders
  - name: Accounts
  - name: Common
  - name: Callbacks

x-speakeasy-retries:
  strategy: backoff
  backoff:
    initialInterval: 500
    maxInterval: 60000
    maxElapsedTime: 3600000
    exponent: 1.5
  statusCodes:
    - 5XX
  retryConnectionErrors: true
x-webhooks:
  - post:
      tags:
        - Callbacks
      summary: Messages status change
      description: "If a message status changes, the configured custom *Callback URL* will be automatically trigerred with an `array` of `Message` objects sent by `POST` request (in request body), containing information about new status of a messages. You can setup a callback URL in [User Panel](https://panel.gsmservice.pl) in API configuration section. In one call system will pass information about up to **50 messages** status changes.\r\n                             \r\nAfter receiving a Callback you should response with correct HTTP code (ex. `200`). If a response will contain another code (`4XX` or `5XX`), a callback will be triggered by system again in few minutes."
      operationId: statusChanges
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Message'
              maxItems: 50
              minItems: 1
      responses:
        2XX:
          description: >-
            Callback was received correctly. System won't trigger callback URL
            again
        4XX:
          description: >-
            Problem with received data. System will try to trigger callback URL
            again
        5XX:
          description: >-
            User System Internal Error. System will try to trigger callback URL
            again
      security:
        - User_Bearer: []
        - {}
    webhook: status-changes
  - post:
      tags:
        - Callbacks
      summary: New incoming messages
      description: "If a new incoming message will be received by the Gateway, the configured custom *Callback URL* will be automatically trigerred with an `array` of `IncomingMessage` objects sent by `POST` request (in request body), containing information about new incoming messages. You can setup a callback URL in [User Panel](https://panel.gsmservice.pl) in Incoming Messages configuration section. In one call system will pass information about up to **50 incoming messages**.\r\n                             \r\nAfter receiving a Callback you should response with correct HTTP code (ex. `200`). If a response will contain another code (`4XX` or `5XX`), a callback will be triggered by system again in few minutes."
      operationId: incomingMessages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IncomingMessage'
              maxItems: 50
              minItems: 1
      responses:
        2XX:
          description: >-
            Callback was received correctly. System won't trigger callback URL
            again
        4XX:
          description: >-
            Problem with received data. System will try to trigger callback URL
            again
        5XX:
          description: >-
            User System Internal Error. System will try to trigger callback URL
            again
      security:
        - User_Bearer: []
        - {}
    webhook: incoming-messages
